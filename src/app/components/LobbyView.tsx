'use client';

import { useState, useEffect, useCallback } from 'react';
import { lobbyService, Lobby } from '../services/lobbyService';
import { authService } from '../services/authService';
import { ShipPlacement } from './ShipPlacement';

interface LobbyViewProps {
  lobbyId: string;
  onStartGame: () => void;
  onLeaveLobby: () => void;
}

export const LobbyView = ({ lobbyId, onStartGame, onLeaveLobby }: LobbyViewProps) => {
  const [lobby, setLobby] = useState<Lobby | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [copied, setCopied] = useState(false);
  const [loadAttempt, setLoadAttempt] = useState(0);
  const [refreshing, setRefreshing] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);
  const [gameId, setGameId] = useState<string | null>(null);
  const currentUser = authService.getUser();
  const isOwner = currentUser && lobby?.ownerUsername === currentUser.username;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
  const loadLobby = useCallback(async () => {
    if (refreshing) return;
    
    setRefreshing(true);
    setError(null);
    
    try {
      const result = await lobbyService.getLobbyById(lobbyId);
      
      if ('message' in result) {
        setError(result.message);
      } else {
        setLobby(result);
        setError(null);
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–∞–±–ª–µ–π
        if (result.status === 'IN_GAME' && !gameStarted) {
          setGameStarted(true);
          setGameId(result.gameId);
        }
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏');
      console.error('Error loading lobby:', error);
    } finally {
      setRefreshing(false);
    }
  }, [lobbyId, refreshing, gameStarted]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  useEffect(() => {
    loadLobby();
    
    const interval = setInterval(() => {
      loadLobby();
    }, 1000);
    
    return () => clearInterval(interval);
  }, [lobbyId, loadLobby]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∏–≥—Ä—É, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ IN_GAME
  useEffect(() => {
    if (lobby && lobby.status === 'IN_GAME' && !isOwner && !gameStarted) {
      setGameStarted(true);
      setGameId(lobby.gameId);
    }
  }, [lobby, isOwner, gameStarted]);

  // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
  const handleRefresh = () => {
    setLoadAttempt(prev => prev + 1);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–æ–±–±–∏
  const handleLeaveLobby = async () => {
    try {
      setIsLoading(true);
      const result = await lobbyService.leaveLobby(lobbyId);
      
      if (result === true) {
        onLeaveLobby();
      } else if (typeof result === 'object' && 'message' in result) {
        setError(result.message);
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ª–æ–±–±–∏');
      console.error('Error leaving lobby:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
  const handleStartGame = async () => {
    try {
      setIsLoading(true);
      const result = await lobbyService.startGame(lobbyId);
      
      if (!('message' in result)) {
        setGameStarted(true);
        setGameId(result.gameId);
      } else {
        setError(result.message);
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã');
      console.error('Error starting game:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –ª–æ–±–±–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyLobbyId = () => {
    navigator.clipboard.writeText(lobbyId);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  if (isLoading && !lobby) {
    return (
      <div className="bg-gray-800/70 rounded-2xl p-6 text-white w-full flex justify-center items-center" style={{ minHeight: '400px' }}>
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error && !lobby) {
    return (
      <div className="bg-gray-800/70 rounded-2xl p-6 text-white w-full" style={{ minHeight: '400px' }}>
        <h2 className="text-2xl font-bold mb-4 text-red-400">–û—à–∏–±–∫–∞</h2>
        <p className="mb-4">{error}</p>
        <button
          onClick={onLeaveLobby}
          className="px-4 py-2 bg-blue-500 rounded-lg hover:bg-blue-600 transition"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ª–æ–±–±–∏
        </button>
      </div>
    );
  }

  if (!lobby) {
    return (
      <div className="bg-gray-800/70 rounded-2xl p-6 text-white w-full" style={{ minHeight: '400px' }}>
        <h2 className="text-2xl font-bold mb-4">–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h2>
        <button
          onClick={onLeaveLobby}
          className="px-4 py-2 bg-blue-500 rounded-lg hover:bg-blue-600 transition"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ª–æ–±–±–∏
        </button>
      </div>
    );
  }

  // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π
  if (gameStarted && gameId) {
    return (
      <ShipPlacement
        gameId={gameId}
        onReady={() => {
          // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
          console.log('–ò–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤');
        }}
      />
    );
  }

  const canStartGame = isOwner && lobby.currentPlayers === 2 && (lobby.status === 'WAITING' || lobby.status === 'FULL' || lobby.status === 'IN_GAME');

  return (
    <div className="bg-gray-800/70 rounded-2xl p-6 text-white w-full">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">{lobby.lobbyName}</h2>
        <div className="flex gap-2">
          <button 
            onClick={handleRefresh}
            className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-lg transition flex items-center text-sm"
            disabled={refreshing}
          >
            {refreshing ? (
              <>
                <div className="animate-spin rounded-full h-3 w-3 border-t-2 border-b-2 border-white mr-1"></div>
                –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
              </>
            ) : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
          </button>
          <div className="text-sm text-gray-400">
            {lobby.isPrivate ? '–ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ª–æ–±–±–∏' : '–ü—É–±–ª–∏—á–Ω–æ–µ –ª–æ–±–±–∏'} ‚Ä¢ 
            <span className={
              lobby.status === 'WAITING' ? 'text-yellow-400 ml-1' :
              lobby.status === 'FULL' ? 'text-blue-400 ml-1' :
              lobby.status === 'IN_GAME' ? 'text-green-400 ml-1' :
              'text-gray-400 ml-1'
            }>
              {lobby.status === 'WAITING' ? '–û–∂–∏–¥–∞–Ω–∏–µ' :
               lobby.status === 'FULL' ? '–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ' :
               lobby.status === 'IN_GAME' ? '–í –∏–≥—Ä–µ' :
               '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'}
            </span>
          </div>
        </div>
      </div>

      {error && (
        <div className="mb-4 p-3 bg-red-500/20 border border-red-500 rounded-lg text-red-200 flex justify-between items-center">
          <span>{error}</span>
          <button 
            onClick={() => setError(null)} 
            className="text-red-300 hover:text-white"
          >
            ‚úï
          </button>
        </div>
      )}
      
      <div className="mb-6 bg-gray-700 p-4 rounded-lg">
        <div className="flex justify-between items-center mb-2">
          <span className="text-gray-300">ID –ª–æ–±–±–∏:</span>
          <div className="flex gap-2">
            <span className="bg-gray-600 px-3 py-1 rounded font-mono">{lobbyId}</span>
            <button
              onClick={copyLobbyId}
              className="bg-blue-500 hover:bg-blue-600 px-3 py-1 rounded transition text-sm"
            >
              {copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
          </div>
        </div>
        <div className="text-sm text-gray-400">
          –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º ID —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É –ª–æ–±–±–∏.
        </div>
      </div>
      
      <div className="mb-6">
        <h3 className="text-lg font-medium mb-2">–ò–≥—Ä–æ–∫–∏ ({lobby.currentPlayers}/{lobby.maxPlayers})</h3>
        <div className="bg-gray-700 rounded-lg divide-y divide-gray-600">
          {lobby.players.map((player, index) => (
            <div 
              key={player} 
              className="p-3 flex justify-between items-center"
            >
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-lg">
                  {index + 1}
                </div>
                <span>{player}</span>
                {player === lobby.ownerUsername && (
                  <span className="text-yellow-500 text-xs bg-yellow-500/20 px-2 py-1 rounded">–í–ª–∞–¥–µ–ª–µ—Ü</span>
                )}
                {player === currentUser?.username && (
                  <span className="text-green-500 text-xs bg-green-500/20 px-2 py-1 rounded">–í—ã</span>
                )}
              </div>
              {player === lobby.ownerUsername && (
                <div className="text-sm text-gray-400">
                  –ú–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
      
      <div className="flex justify-end gap-3">
        <button
          onClick={handleLeaveLobby}
          className="px-4 py-2 border border-gray-600 rounded-lg hover:bg-gray-700 transition"
          disabled={isLoading}
        >
          {isLoading ? '–í—ã—Ö–æ–¥...' : '–ü–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏'}
        </button>
        {isOwner && (
          <button
            onClick={handleStartGame}
            className={`px-4 py-2 rounded-lg transition flex items-center ${
              canStartGame 
                ? 'bg-green-500 hover:bg-green-600' 
                : 'bg-green-500/50 cursor-not-allowed'
            }`}
            disabled={!canStartGame || isLoading}
          >
            {isLoading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></div>
                –ó–∞–ø—É—Å–∫...
              </>
            ) : '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'}
          </button>
        )}
      </div>
      
      {!canStartGame && isOwner && lobby.currentPlayers < 2 && (
        <div className="mt-4 p-3 bg-yellow-500/20 border border-yellow-500 rounded-lg text-yellow-200">
          –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞
        </div>
      )}
    </div>
  );
}; 